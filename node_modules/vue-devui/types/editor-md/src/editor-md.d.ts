import './editor-md.scss';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: StringConstructor;
        default: string;
    };
    options: {
        type: ObjectConstructor;
        default: () => {};
    };
    mode: {
        type: import("vue").PropType<import("./editor-md-types").Mode>;
        default: string;
    };
    customThemeConfig: {
        type: import("vue").PropType<import("./editor-md-types").MDThemeConfig>;
    };
    customToolbars: {
        type: import("vue").PropType<Record<string, import("./toolbar-config").IToolbarItemConfig>>;
    };
    disableChangeEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
    editorContainerHeight: {
        type: NumberConstructor;
    };
    imageUploadToServer: {
        type: BooleanConstructor;
        default: boolean;
    };
    hidePreviewView: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxlength: {
        type: NumberConstructor;
        default: null;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    toolbarConfig: {
        type: import("vue").PropType<import("./editor-md-types").ToolbarConfigProp>;
        default: () => (string | string[])[];
    };
    fullscreenZIndex: {
        type: NumberConstructor;
        default: number;
    };
    hintConfig: {
        type: import("vue").PropType<Record<string, any>>;
    };
    customHintReplaceFn: {
        type: import("vue").PropType<(prefix: string, row: any) => string>;
    };
    baseUrl: {
        type: StringConstructor;
        default: null;
    };
    breaks: {
        type: BooleanConstructor;
        default: boolean;
    };
    customParse: {
        type: import("vue").PropType<(html: string) => string>;
        default: null;
    };
    renderParse: {
        type: import("vue").PropType<(html: string) => string>;
        default: null;
    };
    mdRules: {
        type: ObjectConstructor;
        default: () => {};
    };
    customRendererRules: {
        type: import("vue").PropType<import("./editor-md-types").ICustomRenderRule[]>;
        default: () => never[];
    };
    customXssRules: {
        type: import("vue").PropType<import("./editor-md-types").ICustomXssRule[]>;
        default: () => never[];
    };
    mdPlugins: {
        type: import("vue").PropType<import("./editor-md-types").MdPlugin[]>;
        default: () => never[];
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "update:modelValue" | "afterEditorInit" | "mdCheckedEvent" | "selectHint" | "contentChange" | "previewContentChange", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: StringConstructor;
        default: string;
    };
    options: {
        type: ObjectConstructor;
        default: () => {};
    };
    mode: {
        type: import("vue").PropType<import("./editor-md-types").Mode>;
        default: string;
    };
    customThemeConfig: {
        type: import("vue").PropType<import("./editor-md-types").MDThemeConfig>;
    };
    customToolbars: {
        type: import("vue").PropType<Record<string, import("./toolbar-config").IToolbarItemConfig>>;
    };
    disableChangeEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
    editorContainerHeight: {
        type: NumberConstructor;
    };
    imageUploadToServer: {
        type: BooleanConstructor;
        default: boolean;
    };
    hidePreviewView: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxlength: {
        type: NumberConstructor;
        default: null;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    toolbarConfig: {
        type: import("vue").PropType<import("./editor-md-types").ToolbarConfigProp>;
        default: () => (string | string[])[];
    };
    fullscreenZIndex: {
        type: NumberConstructor;
        default: number;
    };
    hintConfig: {
        type: import("vue").PropType<Record<string, any>>;
    };
    customHintReplaceFn: {
        type: import("vue").PropType<(prefix: string, row: any) => string>;
    };
    baseUrl: {
        type: StringConstructor;
        default: null;
    };
    breaks: {
        type: BooleanConstructor;
        default: boolean;
    };
    customParse: {
        type: import("vue").PropType<(html: string) => string>;
        default: null;
    };
    renderParse: {
        type: import("vue").PropType<(html: string) => string>;
        default: null;
    };
    mdRules: {
        type: ObjectConstructor;
        default: () => {};
    };
    customRendererRules: {
        type: import("vue").PropType<import("./editor-md-types").ICustomRenderRule[]>;
        default: () => never[];
    };
    customXssRules: {
        type: import("vue").PropType<import("./editor-md-types").ICustomXssRule[]>;
        default: () => never[];
    };
    mdPlugins: {
        type: import("vue").PropType<import("./editor-md-types").MdPlugin[]>;
        default: () => never[];
    };
}>>, {
    options: Record<string, any>;
    mode: import("./editor-md-types").Mode;
    placeholder: string;
    maxlength: number;
    modelValue: string;
    baseUrl: string;
    disableChangeEvent: boolean;
    imageUploadToServer: boolean;
    hidePreviewView: boolean;
    toolbarConfig: import("./editor-md-types").ToolbarConfigProp;
    fullscreenZIndex: number;
    breaks: boolean;
    customParse: (html: string) => string;
    renderParse: (html: string) => string;
    mdRules: Record<string, any>;
    customRendererRules: import("./editor-md-types").ICustomRenderRule[];
    customXssRules: import("./editor-md-types").ICustomXssRule[];
    mdPlugins: import("./editor-md-types").MdPlugin[];
}>;
export default _default;
