import { toRefs, ref, onMounted, defineComponent, createVNode } from "vue";
import * as Diff2Html from "diff2html";
const codeReviewProps = {
  diff: {
    type: String,
    required: true,
    default: ""
  },
  outputFormat: {
    type: String,
    default: "line-by-line"
  }
};
function createBem(namespace, element, modifier) {
  let cls = namespace;
  if (element) {
    cls += `__${element}`;
  }
  if (modifier) {
    cls += `--${modifier}`;
  }
  return cls;
}
function useNamespace(block, needDot = false) {
  const namespace = needDot ? `.devui-${block}` : `devui-${block}`;
  const b = () => createBem(namespace);
  const e = (element) => element ? createBem(namespace, element) : "";
  const m = (modifier) => modifier ? createBem(namespace, "", modifier) : "";
  const em = (element, modifier) => element && modifier ? createBem(namespace, element, modifier) : "";
  return {
    b,
    e,
    m,
    em
  };
}
function useCodeReview(props) {
  const { diff, outputFormat } = toRefs(props);
  const renderHtml = ref("");
  onMounted(() => {
    renderHtml.value = Diff2Html.html(diff.value, {
      drawFileList: true,
      matching: "lines",
      outputFormat: outputFormat.value
    });
  });
  return { renderHtml };
}
var diff2html_min = "";
var codeReview = "";
var CodeReview = defineComponent({
  name: "DCodeReview",
  props: codeReviewProps,
  setup(props) {
    const ns = useNamespace("code-review");
    const {
      renderHtml
    } = useCodeReview(props);
    return () => createVNode("div", {
      "class": ns.b(),
      "innerHTML": renderHtml.value
    }, null);
  }
});
var index = {
  title: "CodeReview \u4EE3\u7801\u68C0\u89C6",
  category: "\u6F14\u8FDB\u4E2D",
  status: "100%",
  install(app) {
    app.component(CodeReview.name, CodeReview);
  }
};
export { CodeReview, codeReviewProps, index as default };
